@using Rinsen.Outback.App.Models
@model IdentityOverview
@{
    ViewData["Title"] = "Outback identity";
    Layout = "_Layout";
}
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <a class="navbar-brand" href="#">Navbar</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav">
            <li class="nav-item active">
                <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
            </li>
            @if (User.HasClaim(c => c.Type == Rinsen.IdentityProvider.RinsenClaimTypes.Administrator && c.Value == "true"))
        {
            <li class="nav-item">
                    <a class="nav-link" href="/swagger">Swagger</a>
                </li>
        }
            <li class="nav-item">
                <a class="nav-link" href="/Identity/Logout">Sign out</a>
            </li>
            <li class="nav-item">
                <a class="nav-link disabled" href="#">Disabled</a>
            </li>
        </ul>
        <span class="navbar-text">
            @User.Identity?.Name
        </span>
    </div>
</nav>
<h1>Sessions</h1>
<div>
    <div class="row">
        <div class="col-12">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Client</th>
                        <th scope="col">Login time</th>
                        <th scope="col">Status</th>
                        <th scope="col">End time</th>
                        <th scope="col">Ip Address</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@Model.CurrentSession.ClientDescrition</td>
                        <td class="format-time" data-time="@Model.CurrentSession.Created.ToString("o")"></td>
                        <td>Current</td>
                        <td class="format-time" data-time="@Model.CurrentSession.Expires.ToString("o")"></td>
                        <td>@Model.CurrentSession.IpAddress</td>
                    </tr>
                    @foreach (var session in Model.Sessions.Where(m => !m.Deleted && !m.Expired).OrderByDescending(m => m.Created))
                {
                    <tr>
                            <td>@session.ClientDescrition</td>
                            <td class="format-time" data-time="@session.Created.ToString("o")"></td>
                            <td>Other</td>
                            <td class="format-time" data-time="@session.Expires.ToString("o")"></td>
                            <td>@session.IpAddress</td>
                        </tr>
                }
                    @foreach (var session in Model.Sessions.Where(m => !m.Deleted && m.Expired).OrderByDescending(m => m.Created))
                {
                    <tr>
                            <td>@session.ClientDescrition</td>
                            <td class="format-time" data-time="@session.Created.ToString("o")"></td>
                            <td>Expired</td>
                            <td class="format-time" data-time="@session.Expires.ToString("o")"></td>
                            <td>@session.IpAddress</td>
                        </tr>
                }
                    @foreach (var session in Model.Sessions.Where(m => m.Deleted).OrderByDescending(m => m.Created))
                {
                    <tr>
                            <td>@session.ClientDescrition</td>
                            <td class="format-time" data-time="@session.Created.ToString("o")"></td>
                            <td>Signed out</td>
                            <td class="format-time" data-time="@session.Expires.ToString("o")"></td>
                            <td>@session.IpAddress</td>
                        </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const expiresCells = document.querySelectorAll(".format-time");
        expiresCells.forEach(cell => {
            const expiresIso = cell.getAttribute("data-time");
            if (expiresIso) {
                const localDate = new Date(expiresIso).toLocaleString();
                cell.textContent = localDate;
            }
        });
    });
</script>
