@using Rinsen.Outback.App.Models
@model IdentityOverview
@{
    ViewData["Title"] = "Outback identity";
    Layout = "_LayoutIdentity";
}

<!-- Sticky navbar outside the container -->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
    <div class="container">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active">
                    <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
                </li>
                @if (User.HasClaim(c => c.Type == Rinsen.IdentityProvider.RinsenClaimTypes.Administrator && c.Value == "true"))
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/swagger">Swagger</a>
                    </li>
                }
                <li class="nav-item">
                    <a class="nav-link" href="/Identity/Logout">Sign out</a>
                </li>
            </ul>
            <span class="navbar-text">
                @User.Identity?.Name
            </span>
        </div>
    </div>
</nav>

<div class="identity-container">
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Active and Past Sessions</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="thead-light">
                        <tr>
                            <th scope="col">Client</th>
                            <th scope="col">Login time</th>
                            <th scope="col">Status</th>
                            <th scope="col">End time</th>
                            <th scope="col">IP Address</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="table-primary">
                            <td>@Model.CurrentSession.ClientDescrition</td>
                            <td class="format-time" data-time="@Model.CurrentSession.Created.ToString("o")"></td>
                            <td><span class="badge badge-success">Current</span></td>
                            <td class="format-time" data-time="@Model.CurrentSession.Expires.ToString("o")"></td>
                            <td>@Model.CurrentSession.IpAddress</td>
                        </tr>
                        @foreach (var session in Model.Sessions.Where(m => !m.Deleted && !m.Expired).OrderByDescending(m => m.Created))
                        {
                            <tr>
                                <td>@session.ClientDescrition</td>
                                <td class="format-time" data-time="@session.Created.ToString("o")"></td>
                                <td><span class="badge badge-info">Active</span></td>
                                <td class="format-time" data-time="@session.Expires.ToString("o")"></td>
                                <td>@session.IpAddress</td>
                            </tr>
                        }
                        @foreach (var session in Model.Sessions.Where(m => !m.Deleted && m.Expired).OrderByDescending(m => m.Created))
                        {
                            <tr>
                                <td>@session.ClientDescrition</td>
                                <td class="format-time" data-time="@session.Created.ToString("o")"></td>
                                <td><span class="badge badge-warning">Expired</span></td>
                                <td class="format-time" data-time="@session.Expires.ToString("o")"></td>
                                <td>@session.IpAddress</td>
                            </tr>
                        }
                        @foreach (var session in Model.Sessions.Where(m => m.Deleted).OrderByDescending(m => m.Created))
                        {
                            <tr>
                                <td>@session.ClientDescrition</td>
                                <td class="format-time" data-time="@session.Created.ToString("o")"></td>
                                <td><span class="badge badge-secondary">Signed out</span></td>
                                <td class="format-time" data-time="@session.Expires.ToString("o")"></td>
                                <td>@session.IpAddress</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <p class="mt-5 mb-3 text-muted">&copy; 2019-@DateTime.Now.Year</p>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const expiresCells = document.querySelectorAll(".format-time");
        expiresCells.forEach(cell => {
            const expiresIso = cell.getAttribute("data-time");
            if (expiresIso) {
                const localDate = new Date(expiresIso).toLocaleString();
                cell.textContent = localDate;
            }
        });
    });
</script>

<style>
    /* Additional styles specific to this page */
    .identity-container {
        width: 100%;
        max-width: 800px;
        padding: 15px;
        margin: auto;
        margin-top: 70px; /* Add space for the fixed navbar */
    }

    .identity-header {
        text-align: center;
    }

    .user-name {
        font-weight: bold;
        color: #007bff;
    }

    .table {
        font-size: 0.9rem;
    }

    .badge {
        font-size: 85%;
    }

    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border-radius: 0.5rem;
    }

    .card-header {
        background-color: rgba(0, 0, 0, 0.03);
        border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    }

    body {
        align-items: flex-start;
        padding-top: 20px;
    }
    
    /* Sticky navbar styles */
    .fixed-top {
        position: fixed;
        top: 0;
        right: 0;
        left: 0;
        z-index: 1030;
    }
    
    .navbar-dark {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
</style>
