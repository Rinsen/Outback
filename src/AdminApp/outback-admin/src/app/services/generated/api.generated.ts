//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class ClientClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get a list of all clients
     * @return Success
     */
    getAll(): Observable<OutbackClient[]> {
        let url_ = this.baseUrl + "/Outback/api/Client";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OutbackClient[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OutbackClient[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<OutbackClient[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OutbackClient.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create a client
     * @return Created
     */
    create(body: CreateClient): Observable<OutbackClient> {
        let url_ = this.baseUrl + "/Outback/api/Client";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OutbackClient>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OutbackClient>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<OutbackClient> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = OutbackClient.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get a specific client by id
     * @return Success
     */
    get(id: string): Observable<OutbackClient> {
        let url_ = this.baseUrl + "/Outback/api/Client/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OutbackClient>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OutbackClient>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<OutbackClient> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OutbackClient.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete a client
     * @return Success
     */
    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/Outback/api/Client/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update a client
     * @return Success
     */
    update(id: string, body: OutbackClient): Observable<void> {
        let url_ = this.baseUrl + "/Outback/api/Client/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get all client families
     * @return Success
     */
    getFamily(): Observable<OutbackClientFamily[]> {
        let url_ = this.baseUrl + "/Outback/api/Client/Family";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFamily(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFamily(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OutbackClientFamily[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OutbackClientFamily[]>;
        }));
    }

    protected processGetFamily(response: HttpResponseBase): Observable<OutbackClientFamily[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OutbackClientFamily.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create client family
     * @return Created
     */
    createFamily(body: CreateFamily): Observable<OutbackClientFamily> {
        let url_ = this.baseUrl + "/Outback/api/Client/Family";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateFamily(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateFamily(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OutbackClientFamily>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OutbackClientFamily>;
        }));
    }

    protected processCreateFamily(response: HttpResponseBase): Observable<OutbackClientFamily> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = OutbackClientFamily.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class RandomClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get a random string with provided length
     * @return Success
     */
    get(count: number): Observable<string> {
        let url_ = this.baseUrl + "/Outback/api/Random/{count}";
        if (count === undefined || count === null)
            throw new Error("The parameter 'count' must be defined.");
        url_ = url_.replace("{count}", encodeURIComponent("" + count));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ScopeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all scopes
     * @return Success
     */
    getAll(): Observable<OutbackScope[]> {
        let url_ = this.baseUrl + "/Outback/api/Scope";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OutbackScope[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OutbackScope[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<OutbackScope[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OutbackScope.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create a new scope
     * @param body (optional) 
     * @return Created
     */
    create(body: CreateScope | undefined): Observable<OutbackScope> {
        let url_ = this.baseUrl + "/Outback/api/Scope";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OutbackScope>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OutbackScope>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<OutbackScope> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = OutbackScope.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get a specific scope by id
     * @return Success
     */
    get(id: number): Observable<OutbackScope> {
        let url_ = this.baseUrl + "/Outback/api/Scope/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OutbackScope>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OutbackScope>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<OutbackScope> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OutbackScope.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update scope
     * @param body (optional) 
     * @return Success
     */
    update(id: number, body: OutbackScope | undefined): Observable<void> {
        let url_ = this.baseUrl + "/Outback/api/Scope/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete a scope
     * @return Success
     */
    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/Outback/api/Scope/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export enum ClientType {
    _0 = 0,
    _1 = 1,
}

export class CreateClient implements ICreateClient {
    clientName!: string;
    description!: string;
    clientType!: ClientType;
    familyId!: number;

    constructor(data?: ICreateClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientName = _data["clientName"];
            this.description = _data["description"];
            this.clientType = _data["clientType"];
            this.familyId = _data["familyId"];
        }
    }

    static fromJS(data: any): CreateClient {
        data = typeof data === 'object' ? data : {};
        let result = new CreateClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientName"] = this.clientName;
        data["description"] = this.description;
        data["clientType"] = this.clientType;
        data["familyId"] = this.familyId;
        return data;
    }
}

export interface ICreateClient {
    clientName: string;
    description: string;
    clientType: ClientType;
    familyId: number;
}

export class CreateFamily implements ICreateFamily {
    name!: string;
    description!: string;

    constructor(data?: ICreateFamily) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateFamily {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateFamily {
    name: string;
    description: string;
}

export class CreateScope implements ICreateScope {
    name?: string;
    description?: string;
    scopeName?: string;
    showInDiscoveryDocument?: boolean;
    claimsInIdToken?: boolean;
    enabled?: boolean;
    audience?: string;

    constructor(data?: ICreateScope) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.scopeName = _data["scopeName"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            this.claimsInIdToken = _data["claimsInIdToken"];
            this.enabled = _data["enabled"];
            this.audience = _data["audience"];
        }
    }

    static fromJS(data: any): CreateScope {
        data = typeof data === 'object' ? data : {};
        let result = new CreateScope();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["scopeName"] = this.scopeName;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        data["claimsInIdToken"] = this.claimsInIdToken;
        data["enabled"] = this.enabled;
        data["audience"] = this.audience;
        return data;
    }
}

export interface ICreateScope {
    name?: string;
    description?: string;
    scopeName?: string;
    showInDiscoveryDocument?: boolean;
    claimsInIdToken?: boolean;
    enabled?: boolean;
    audience?: string;
}

export class OutbackClient implements IOutbackClient {
    id?: number;
    clientId?: string;
    active?: boolean;
    name?: string;
    description?: string;
    clientType?: ClientType;
    clientFamilyId?: number;
    consentRequired?: boolean;
    saveConsent?: boolean;
    addUserInfoClaimsInIdentityToken?: boolean;
    issueRefreshToken?: boolean;
    issueIdentityToken?: boolean;
    savedConsentLifetime?: number;
    refreshTokenLifetime?: number;
    accessTokenLifetime?: number;
    identityTokenLifetime?: number;
    authorityCodeLifetime?: number;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;
    clientFamily?: OutbackClientFamily;
    clientClaims?: OutbackClientClaim[];
    secrets?: OutbackClientSecret[];
    scopes?: OutbackClientScope[];
    supportedGrantTypes?: OutbackClientSupportedGrantType[];
    loginRedirectUris?: OutbackClientLoginRedirectUri[];
    postLogoutRedirectUris?: OutbackClientPostLogoutRedirectUri[];
    allowedCorsOrigins?: OutbackClientAllowedCorsOrigin[];

    constructor(data?: IOutbackClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.active = _data["active"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.clientType = _data["clientType"];
            this.clientFamilyId = _data["clientFamilyId"];
            this.consentRequired = _data["consentRequired"];
            this.saveConsent = _data["saveConsent"];
            this.addUserInfoClaimsInIdentityToken = _data["addUserInfoClaimsInIdentityToken"];
            this.issueRefreshToken = _data["issueRefreshToken"];
            this.issueIdentityToken = _data["issueIdentityToken"];
            this.savedConsentLifetime = _data["savedConsentLifetime"];
            this.refreshTokenLifetime = _data["refreshTokenLifetime"];
            this.accessTokenLifetime = _data["accessTokenLifetime"];
            this.identityTokenLifetime = _data["identityTokenLifetime"];
            this.authorityCodeLifetime = _data["authorityCodeLifetime"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
            this.deleted = _data["deleted"] ? new Date(_data["deleted"].toString()) : <any>undefined;
            this.clientFamily = _data["clientFamily"] ? OutbackClientFamily.fromJS(_data["clientFamily"]) : <any>undefined;
            if (Array.isArray(_data["clientClaims"])) {
                this.clientClaims = [] as any;
                for (let item of _data["clientClaims"])
                    this.clientClaims!.push(OutbackClientClaim.fromJS(item));
            }
            if (Array.isArray(_data["secrets"])) {
                this.secrets = [] as any;
                for (let item of _data["secrets"])
                    this.secrets!.push(OutbackClientSecret.fromJS(item));
            }
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [] as any;
                for (let item of _data["scopes"])
                    this.scopes!.push(OutbackClientScope.fromJS(item));
            }
            if (Array.isArray(_data["supportedGrantTypes"])) {
                this.supportedGrantTypes = [] as any;
                for (let item of _data["supportedGrantTypes"])
                    this.supportedGrantTypes!.push(OutbackClientSupportedGrantType.fromJS(item));
            }
            if (Array.isArray(_data["loginRedirectUris"])) {
                this.loginRedirectUris = [] as any;
                for (let item of _data["loginRedirectUris"])
                    this.loginRedirectUris!.push(OutbackClientLoginRedirectUri.fromJS(item));
            }
            if (Array.isArray(_data["postLogoutRedirectUris"])) {
                this.postLogoutRedirectUris = [] as any;
                for (let item of _data["postLogoutRedirectUris"])
                    this.postLogoutRedirectUris!.push(OutbackClientPostLogoutRedirectUri.fromJS(item));
            }
            if (Array.isArray(_data["allowedCorsOrigins"])) {
                this.allowedCorsOrigins = [] as any;
                for (let item of _data["allowedCorsOrigins"])
                    this.allowedCorsOrigins!.push(OutbackClientAllowedCorsOrigin.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OutbackClient {
        data = typeof data === 'object' ? data : {};
        let result = new OutbackClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["active"] = this.active;
        data["name"] = this.name;
        data["description"] = this.description;
        data["clientType"] = this.clientType;
        data["clientFamilyId"] = this.clientFamilyId;
        data["consentRequired"] = this.consentRequired;
        data["saveConsent"] = this.saveConsent;
        data["addUserInfoClaimsInIdentityToken"] = this.addUserInfoClaimsInIdentityToken;
        data["issueRefreshToken"] = this.issueRefreshToken;
        data["issueIdentityToken"] = this.issueIdentityToken;
        data["savedConsentLifetime"] = this.savedConsentLifetime;
        data["refreshTokenLifetime"] = this.refreshTokenLifetime;
        data["accessTokenLifetime"] = this.accessTokenLifetime;
        data["identityTokenLifetime"] = this.identityTokenLifetime;
        data["authorityCodeLifetime"] = this.authorityCodeLifetime;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["deleted"] = this.deleted ? this.deleted.toISOString() : <any>undefined;
        data["clientFamily"] = this.clientFamily ? this.clientFamily.toJSON() : <any>undefined;
        if (Array.isArray(this.clientClaims)) {
            data["clientClaims"] = [];
            for (let item of this.clientClaims)
                data["clientClaims"].push(item.toJSON());
        }
        if (Array.isArray(this.secrets)) {
            data["secrets"] = [];
            for (let item of this.secrets)
                data["secrets"].push(item.toJSON());
        }
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item.toJSON());
        }
        if (Array.isArray(this.supportedGrantTypes)) {
            data["supportedGrantTypes"] = [];
            for (let item of this.supportedGrantTypes)
                data["supportedGrantTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.loginRedirectUris)) {
            data["loginRedirectUris"] = [];
            for (let item of this.loginRedirectUris)
                data["loginRedirectUris"].push(item.toJSON());
        }
        if (Array.isArray(this.postLogoutRedirectUris)) {
            data["postLogoutRedirectUris"] = [];
            for (let item of this.postLogoutRedirectUris)
                data["postLogoutRedirectUris"].push(item.toJSON());
        }
        if (Array.isArray(this.allowedCorsOrigins)) {
            data["allowedCorsOrigins"] = [];
            for (let item of this.allowedCorsOrigins)
                data["allowedCorsOrigins"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOutbackClient {
    id?: number;
    clientId?: string;
    active?: boolean;
    name?: string;
    description?: string;
    clientType?: ClientType;
    clientFamilyId?: number;
    consentRequired?: boolean;
    saveConsent?: boolean;
    addUserInfoClaimsInIdentityToken?: boolean;
    issueRefreshToken?: boolean;
    issueIdentityToken?: boolean;
    savedConsentLifetime?: number;
    refreshTokenLifetime?: number;
    accessTokenLifetime?: number;
    identityTokenLifetime?: number;
    authorityCodeLifetime?: number;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;
    clientFamily?: OutbackClientFamily;
    clientClaims?: OutbackClientClaim[];
    secrets?: OutbackClientSecret[];
    scopes?: OutbackClientScope[];
    supportedGrantTypes?: OutbackClientSupportedGrantType[];
    loginRedirectUris?: OutbackClientLoginRedirectUri[];
    postLogoutRedirectUris?: OutbackClientPostLogoutRedirectUri[];
    allowedCorsOrigins?: OutbackClientAllowedCorsOrigin[];
}

export class OutbackClientAllowedCorsOrigin implements IOutbackClientAllowedCorsOrigin {
    id?: number;
    clientId?: number;
    origin?: string;
    description?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;

    constructor(data?: IOutbackClientAllowedCorsOrigin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.origin = _data["origin"];
            this.description = _data["description"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
            this.deleted = _data["deleted"] ? new Date(_data["deleted"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OutbackClientAllowedCorsOrigin {
        data = typeof data === 'object' ? data : {};
        let result = new OutbackClientAllowedCorsOrigin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["origin"] = this.origin;
        data["description"] = this.description;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["deleted"] = this.deleted ? this.deleted.toISOString() : <any>undefined;
        return data;
    }
}

export interface IOutbackClientAllowedCorsOrigin {
    id?: number;
    clientId?: number;
    origin?: string;
    description?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;
}

export class OutbackClientClaim implements IOutbackClientClaim {
    id?: number;
    clientId?: number;
    type?: string;
    value?: string;
    description?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;

    constructor(data?: IOutbackClientClaim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.type = _data["type"];
            this.value = _data["value"];
            this.description = _data["description"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
            this.deleted = _data["deleted"] ? new Date(_data["deleted"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OutbackClientClaim {
        data = typeof data === 'object' ? data : {};
        let result = new OutbackClientClaim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["type"] = this.type;
        data["value"] = this.value;
        data["description"] = this.description;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["deleted"] = this.deleted ? this.deleted.toISOString() : <any>undefined;
        return data;
    }
}

export interface IOutbackClientClaim {
    id?: number;
    clientId?: number;
    type?: string;
    value?: string;
    description?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;
}

export class OutbackClientFamily implements IOutbackClientFamily {
    id?: number;
    name?: string;
    description?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;

    constructor(data?: IOutbackClientFamily) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
            this.deleted = _data["deleted"] ? new Date(_data["deleted"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OutbackClientFamily {
        data = typeof data === 'object' ? data : {};
        let result = new OutbackClientFamily();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["deleted"] = this.deleted ? this.deleted.toISOString() : <any>undefined;
        return data;
    }
}

export interface IOutbackClientFamily {
    id?: number;
    name?: string;
    description?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;
}

export class OutbackClientLoginRedirectUri implements IOutbackClientLoginRedirectUri {
    id?: number;
    clientId?: number;
    loginRedirectUri?: string;
    description?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;

    constructor(data?: IOutbackClientLoginRedirectUri) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.loginRedirectUri = _data["loginRedirectUri"];
            this.description = _data["description"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
            this.deleted = _data["deleted"] ? new Date(_data["deleted"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OutbackClientLoginRedirectUri {
        data = typeof data === 'object' ? data : {};
        let result = new OutbackClientLoginRedirectUri();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["loginRedirectUri"] = this.loginRedirectUri;
        data["description"] = this.description;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["deleted"] = this.deleted ? this.deleted.toISOString() : <any>undefined;
        return data;
    }
}

export interface IOutbackClientLoginRedirectUri {
    id?: number;
    clientId?: number;
    loginRedirectUri?: string;
    description?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;
}

export class OutbackClientPostLogoutRedirectUri implements IOutbackClientPostLogoutRedirectUri {
    id?: number;
    clientId?: number;
    postLogoutRedirectUri?: string;
    description?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;

    constructor(data?: IOutbackClientPostLogoutRedirectUri) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.postLogoutRedirectUri = _data["postLogoutRedirectUri"];
            this.description = _data["description"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
            this.deleted = _data["deleted"] ? new Date(_data["deleted"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OutbackClientPostLogoutRedirectUri {
        data = typeof data === 'object' ? data : {};
        let result = new OutbackClientPostLogoutRedirectUri();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["postLogoutRedirectUri"] = this.postLogoutRedirectUri;
        data["description"] = this.description;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["deleted"] = this.deleted ? this.deleted.toISOString() : <any>undefined;
        return data;
    }
}

export interface IOutbackClientPostLogoutRedirectUri {
    id?: number;
    clientId?: number;
    postLogoutRedirectUri?: string;
    description?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;
}

export class OutbackClientScope implements IOutbackClientScope {
    id?: number;
    clientId?: number;
    scopeId?: number;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;
    scope?: OutbackScope;

    constructor(data?: IOutbackClientScope) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.scopeId = _data["scopeId"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
            this.deleted = _data["deleted"] ? new Date(_data["deleted"].toString()) : <any>undefined;
            this.scope = _data["scope"] ? OutbackScope.fromJS(_data["scope"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OutbackClientScope {
        data = typeof data === 'object' ? data : {};
        let result = new OutbackClientScope();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["scopeId"] = this.scopeId;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["deleted"] = this.deleted ? this.deleted.toISOString() : <any>undefined;
        data["scope"] = this.scope ? this.scope.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOutbackClientScope {
    id?: number;
    clientId?: number;
    scopeId?: number;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;
    scope?: OutbackScope;
}

export class OutbackClientSecret implements IOutbackClientSecret {
    id?: number;
    clientId?: number;
    secret?: string;
    description?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;

    constructor(data?: IOutbackClientSecret) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.secret = _data["secret"];
            this.description = _data["description"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
            this.deleted = _data["deleted"] ? new Date(_data["deleted"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OutbackClientSecret {
        data = typeof data === 'object' ? data : {};
        let result = new OutbackClientSecret();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["secret"] = this.secret;
        data["description"] = this.description;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["deleted"] = this.deleted ? this.deleted.toISOString() : <any>undefined;
        return data;
    }
}

export interface IOutbackClientSecret {
    id?: number;
    clientId?: number;
    secret?: string;
    description?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;
}

export class OutbackClientSupportedGrantType implements IOutbackClientSupportedGrantType {
    id?: number;
    clientId?: number;
    grantType?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;

    constructor(data?: IOutbackClientSupportedGrantType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.grantType = _data["grantType"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
            this.deleted = _data["deleted"] ? new Date(_data["deleted"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OutbackClientSupportedGrantType {
        data = typeof data === 'object' ? data : {};
        let result = new OutbackClientSupportedGrantType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["grantType"] = this.grantType;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["deleted"] = this.deleted ? this.deleted.toISOString() : <any>undefined;
        return data;
    }
}

export interface IOutbackClientSupportedGrantType {
    id?: number;
    clientId?: number;
    grantType?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;
}

export class OutbackScope implements IOutbackScope {
    id?: number;
    displayName?: string;
    description?: string;
    scopeName?: string;
    audience?: string;
    enabled?: boolean;
    showInDiscoveryDocument?: boolean;
    claimsInIdToken?: boolean;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;
    scopeClaims?: OutbackScopeClaim[];

    constructor(data?: IOutbackScope) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.scopeName = _data["scopeName"];
            this.audience = _data["audience"];
            this.enabled = _data["enabled"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            this.claimsInIdToken = _data["claimsInIdToken"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
            this.deleted = _data["deleted"] ? new Date(_data["deleted"].toString()) : <any>undefined;
            if (Array.isArray(_data["scopeClaims"])) {
                this.scopeClaims = [] as any;
                for (let item of _data["scopeClaims"])
                    this.scopeClaims!.push(OutbackScopeClaim.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OutbackScope {
        data = typeof data === 'object' ? data : {};
        let result = new OutbackScope();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["scopeName"] = this.scopeName;
        data["audience"] = this.audience;
        data["enabled"] = this.enabled;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        data["claimsInIdToken"] = this.claimsInIdToken;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["deleted"] = this.deleted ? this.deleted.toISOString() : <any>undefined;
        if (Array.isArray(this.scopeClaims)) {
            data["scopeClaims"] = [];
            for (let item of this.scopeClaims)
                data["scopeClaims"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOutbackScope {
    id?: number;
    displayName?: string;
    description?: string;
    scopeName?: string;
    audience?: string;
    enabled?: boolean;
    showInDiscoveryDocument?: boolean;
    claimsInIdToken?: boolean;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;
    scopeClaims?: OutbackScopeClaim[];
}

export class OutbackScopeClaim implements IOutbackScopeClaim {
    id?: number;
    scopeId?: number;
    type?: string;
    description?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;

    constructor(data?: IOutbackScopeClaim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.scopeId = _data["scopeId"];
            this.type = _data["type"];
            this.description = _data["description"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
            this.deleted = _data["deleted"] ? new Date(_data["deleted"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OutbackScopeClaim {
        data = typeof data === 'object' ? data : {};
        let result = new OutbackScopeClaim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["scopeId"] = this.scopeId;
        data["type"] = this.type;
        data["description"] = this.description;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["deleted"] = this.deleted ? this.deleted.toISOString() : <any>undefined;
        return data;
    }
}

export interface IOutbackScopeClaim {
    id?: number;
    scopeId?: number;
    type?: string;
    description?: string;
    created?: Date;
    updated?: Date;
    deleted?: Date | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}